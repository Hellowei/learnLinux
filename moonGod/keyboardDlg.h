#ifndef _KEYBOARDDLG_H_
#define _KEYBOARDDLG_H_


enum keyboard_key{
	KEYBOARD_FIRST,
	KEYBOARD_PREVIOUS,
	KEYBOARD_CN1,
	KEYBOARD_CN2,
	KEYBOARD_CN3,
	KEYBOARD_CN4,
	KEYBOARD_CN5,
	KEYBOARD_CN6,
	KEYBOARD_CN7,
	KEYBOARD_CN8,
	KEYBOARD_NEXT,
	KEYBOARD_Q,
	KEYBOARD_W,
	KEYBOARD_E,
	KEYBOARD_R,
	KEYBOARD_T,
	KEYBOARD_Y,
	KEYBOARD_U,
	KEYBOARD_I,
	KEYBOARD_O,
	KEYBOARD_P,
	KEYBOARD_A,
	KEYBOARD_S,
	KEYBOARD_D,
	KEYBOARD_F,
	KEYBOARD_G,
	KEYBOARD_H,
	KEYBOARD_J,
	KEYBOARD_K,
	KEYBOARD_L,
	KEYBOARD_CAPS,
	KEYBOARD_Z,
	KEYBOARD_X,
	KEYBOARD_C,
	KEYBOARD_V,
	KEYBOARD_B,
	KEYBOARD_N,
	KEYBOARD_M,
	KEYBOARD_DELETE,
	KEYBOARD_NUM_MARKS,
	KEYBOARD_IME,
	KEYBOARD_MARK,
	KEYBOARD_SPACE,
	KEYBOARD_MARK1,
	KEYBOARD_MARK2,
	KEYBOARD_ENTER,
	KEYBOARD_MAX
};

enum num_pad_key{
	NUMPAD_ESC,
	NUMPAD_1,
	NUMPAD_2,
	NUMPAD_3,
	NUMPAD_4,
	NUMPAD_5,
	NUMPAD_6,
	NUMPAD_7,
	NUMPAD_8,
	NUMPAD_9,
	NUMPAD_DOT,
	NUMPAD_0,
	NUMPAD_DEL,
	NUMPAD_MINUS,
	NUMPAD_ENTER,
	NUMPAD_MAX
};

typedef enum keyboard_type{
	KEYBOARD_UNS_INT,
	KEYBOARD_INTEGER,
	KEYBOARD_UNS_DEC,
	KEYBOARD_DECIMAL,
	KEYBOARD_CHINESE,
	KEYBOARD_MASK	   = 0x0F,//panhonghui
	KEYBOARD_LOWERCS	= 0x10,
	KEYBOARD_UPPERCS	= 0x20,
	KEYBOARD_NUMMARKS   = 0x40,
	KEYBOARD_MARKS	  = 0x80,
}KBTYPE;

typedef struct _keyboard_config{
	HWND		parent;
	RESID	   parent_id;
	RESID	   child_id;
	KBTYPE	  kbType;
	UCHAR	   *caption;
	UCHAR	   *tips;
	StrBuffer   variant;
	/* for IME */
	UCHAR	   szPinyin[8];
	UCHAR	   *OutPtr;
	UCHAR	   *CurrPtr;
	/* the end */
}KBCFG;


#endif /*_KEYBOARDDLG_H_*/

