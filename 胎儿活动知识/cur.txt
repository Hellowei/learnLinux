static BOOL CalcAutoFmFalgProc(VOID)
{

#define CALC_SAMPLE_SIZE 50

    static UCHAR Fhr1Buf[CALC_SAMPLE_SIZE] = { 0 };
    static UCHAR Fhr2Buf[CALC_SAMPLE_SIZE] = { 0 };
    static CHAR  TocoBuf[16] = { -1 };
    static UCHAR  ndx1 = 0;
    static UCHAR  ndx2 = 0;
    static INT8  valid_flag = 3;
    BOOL ret = FALSE;
    UCHAR i;
    UCHAR fhr;
    fhr = (FhrConfig.source == 0) ? FhrParams.fhr1 : FhrParams.fhr2;
    if (fhr < 60 || fhr > 210)
    {
        valid_flag--;
    }
    else
    {
        valid_flag = 2;
    }

    if (valid_flag < 1)
    {
        FhrParams.afm = 0;
        if (valid_flag < 0)
        {
            valid_flag = -1;
            return ret;
        }
        ZeroMemory(Fhr1Buf, sizeof(Fhr1Buf));
        ZeroMemory(Fhr2Buf, sizeof(Fhr2Buf));
        ZeroMemory(TocoBuf, sizeof(TocoBuf));
        ndx1 = 0;
        ndx2 = 0;
        return ret;
    }
    Fhr1Buf[ndx1] = FhrParams.fhr1;
    Fhr2Buf[ndx1] = FhrParams.fhr2;
    TocoBuf[ndx2] = FhrParams.toco;

    if (++ndx1 >= CALC_SAMPLE_SIZE)
        ndx1 = 0;
    if (++ndx2 >= sizeof(TocoBuf))
        ndx2 = 0;
    if(0 == FhrConfig.type) 
    { 
        UINT16 summ=0;
        UCHAR  base;
        UCHAR  *p;
        if (FhrConfig.source == 1) // 通道2时使用
        {
            base = Fhr2Buf[(ndx1 + 1)%CALC_SAMPLE_SIZE];
            p = Fhr1Buf;
        }
        else
        {
            base = Fhr1Buf[(ndx1 + 1)%CALC_SAMPLE_SIZE];
            p = Fhr1Buf;
        }
        for(i = 0; i < CALC_SAMPLE_SIZE; i++)
        {
            if((base > 100) && (p[i] > base) && (p[i] < base + 20 + i)
				&& ABS(p[i] - p[(ndx1 + 1)%CALC_SAMPLE_SIZE]) < 8)
            {
                summ += p[i] - base;
            }
        }
        if(summ > 740 )
        {
            ret = TRUE;
        }
        FhrParams.afm = (INT8)((summ >> 6) % 40);
        if (ret == FALSE)
        {
            base = ((ndx2 + 1) & 0x0F);
            if ((TocoBuf[base] > 20)
                && (TocoBuf[(base + 3) & 0x0F] - TocoBuf[base] > 12))
            {
                for (i = 3; i < 14; i++)
                {
                    if (TocoBuf[(base + i) & 0x0F]
                        - TocoBuf[(base + i + 2) & 0x0F] > 20 - i)
                    {
                        ret = TRUE;
                    }
                }
            }
        }
    }//自动胎动计数
    return ret;
}